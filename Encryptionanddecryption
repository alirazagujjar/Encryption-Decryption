using System.Security.Cryptography;
using System.Text;

//Fixed Vector Initialization
 byte[] IV =
{
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
    0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16
};
byte[] DeriveKeyFromPassword(string password)
{
    var emptySalt = Array.Empty<byte>();//empty salt otherwise need to pass it
    var iterations = 1000;
    var desiredKeyLength = 16; // 256 bytes.
    var hashMethod = HashAlgorithmName.SHA384;//hash algorithm
    return Rfc2898DeriveBytes.Pbkdf2(Encoding.Unicode.GetBytes(password),
                                     emptySalt,
                                     iterations,
                                     hashMethod,
                                     desiredKeyLength);
}

 async Task<byte[]> EncryptAsync(string clearText, string passphrase)
{
    using Aes aes = Aes.Create();
    aes.Key = DeriveKeyFromPassword(passphrase);
    aes.IV = IV;

    using MemoryStream output = new();
    using CryptoStream cryptoStream = new(output, aes.CreateEncryptor(), CryptoStreamMode.Write);

    await cryptoStream.WriteAsync(Encoding.Unicode.GetBytes(clearText));
    await cryptoStream.FlushFinalBlockAsync();

    return output.ToArray();
}


 async Task<string> DecryptAsync(byte[] encrypted, string passphrase)
{
    using Aes aes = Aes.Create();
    aes.Key = DeriveKeyFromPassword(passphrase);
    aes.IV = IV;

    using MemoryStream input = new(encrypted);
    using CryptoStream cryptoStream = new(input, aes.CreateDecryptor(), CryptoStreamMode.Read);

    using MemoryStream output = new();
    await cryptoStream.CopyToAsync(output);

    return Encoding.Unicode.GetString(output.ToArray());
}

const string passphrase = "Sup3rS3curePass!"; //public secret key

var encrypted = await EncryptAsync("We use encryption to obscure a piece of information.",
                                                     passphrase);

Console.WriteLine($"Encrypted data: {BitConverter.ToString(encrypted)}");
var decrypted = await DecryptAsync(encrypted, passphrase);

Console.WriteLine($"Decrypted data: {decrypted}");
